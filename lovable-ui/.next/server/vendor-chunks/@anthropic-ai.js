"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@anthropic-ai";
exports.ids = ["vendor-chunks/@anthropic-ai"];
exports.modules = {

/***/ "(rsc)/./node_modules/@anthropic-ai/claude-code/sdk.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@anthropic-ai/claude-code/sdk.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError),\n/* harmony export */   query: () => (/* binding */ query)\n/* harmony export */ });\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var readline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! readline */ \"readline\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fs */ \"fs\");\n// (c) Anthropic PBC. All rights reserved. Use is subject to Anthropic's Commercial Terms of Service (https://www.anthropic.com/legal/commercial-terms).\n\n// Version: 1.0.39\n\n// src/entrypoints/sdk.ts\n\n\n\n\n\nvar __filename2 = (0,url__WEBPACK_IMPORTED_MODULE_2__.fileURLToPath)(\"file:///Users/cloudaistudio/Documents/EVERJUST%20PROJECTS/PROJECT%20JUST%20BUILD/justbuild/lovable-ui/node_modules/@anthropic-ai/claude-code/sdk.mjs\");\nvar __dirname2 = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(__filename2, \"..\");\nasync function* query({\n  prompt,\n  options: {\n    abortController = new AbortController,\n    allowedTools = [],\n    appendSystemPrompt,\n    customSystemPrompt,\n    cwd,\n    disallowedTools = [],\n    executable = isRunningWithBun() ? \"bun\" : \"node\",\n    executableArgs = [],\n    maxTurns,\n    mcpServers,\n    pathToClaudeCodeExecutable = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(__dirname2, \"cli.js\"),\n    permissionMode = \"default\",\n    permissionPromptToolName,\n    continue: continueConversation,\n    resume,\n    model,\n    fallbackModel\n  } = {}\n}) {\n  if (!process.env.CLAUDE_CODE_ENTRYPOINT) {\n    process.env.CLAUDE_CODE_ENTRYPOINT = \"sdk-ts\";\n  }\n  const args = [\"--output-format\", \"stream-json\", \"--verbose\"];\n  if (customSystemPrompt)\n    args.push(\"--system-prompt\", customSystemPrompt);\n  if (appendSystemPrompt)\n    args.push(\"--append-system-prompt\", appendSystemPrompt);\n  if (maxTurns)\n    args.push(\"--max-turns\", maxTurns.toString());\n  if (model)\n    args.push(\"--model\", model);\n  if (permissionPromptToolName)\n    args.push(\"--permission-prompt-tool\", permissionPromptToolName);\n  if (continueConversation)\n    args.push(\"--continue\");\n  if (resume)\n    args.push(\"--resume\", resume);\n  if (allowedTools.length > 0) {\n    args.push(\"--allowedTools\", allowedTools.join(\",\"));\n  }\n  if (disallowedTools.length > 0) {\n    args.push(\"--disallowedTools\", disallowedTools.join(\",\"));\n  }\n  if (mcpServers && Object.keys(mcpServers).length > 0) {\n    args.push(\"--mcp-config\", JSON.stringify({ mcpServers }));\n  }\n  if (permissionMode !== \"default\") {\n    args.push(\"--permission-mode\", permissionMode);\n  }\n  if (fallbackModel) {\n    if (model && fallbackModel === model) {\n      throw new Error(\"Fallback model cannot be the same as the main model. Please specify a different model for fallbackModel option.\");\n    }\n    args.push(\"--fallback-model\", fallbackModel);\n  }\n  if (typeof prompt === \"string\") {\n    args.push(\"--print\", prompt.trim());\n  } else {\n    args.push(\"--input-format\", \"stream-json\");\n  }\n  if (!(0,fs__WEBPACK_IMPORTED_MODULE_4__.existsSync)(pathToClaudeCodeExecutable)) {\n    throw new ReferenceError(`Claude Code executable not found at ${pathToClaudeCodeExecutable}. Is options.pathToClaudeCodeExecutable set?`);\n  }\n  logDebug(`Spawning Claude Code process: ${executable} ${[...executableArgs, pathToClaudeCodeExecutable, ...args].join(\" \")}`);\n  const child = (0,child_process__WEBPACK_IMPORTED_MODULE_0__.spawn)(executable, [...executableArgs, pathToClaudeCodeExecutable, ...args], {\n    cwd,\n    stdio: [\"pipe\", \"pipe\", \"pipe\"],\n    signal: abortController.signal,\n    env: {\n      ...process.env\n    }\n  });\n  if (typeof prompt === \"string\") {\n    child.stdin.end();\n  } else {\n    streamToStdin(prompt, child.stdin, abortController);\n  }\n  if (process.env.DEBUG) {\n    child.stderr.on(\"data\", (data) => {\n      console.error(\"Claude Code stderr:\", data.toString());\n    });\n  }\n  const cleanup = () => {\n    if (!child.killed) {\n      child.kill(\"SIGTERM\");\n    }\n  };\n  abortController.signal.addEventListener(\"abort\", cleanup);\n  process.on(\"exit\", cleanup);\n  try {\n    let processError = null;\n    child.on(\"error\", (error) => {\n      processError = new Error(`Failed to spawn Claude Code process: ${error.message}`);\n    });\n    const processExitPromise = new Promise((resolve, reject) => {\n      child.on(\"close\", (code) => {\n        if (abortController.signal.aborted) {\n          reject(new AbortError(\"Claude Code process aborted by user\"));\n        }\n        if (code !== 0) {\n          reject(new Error(`Claude Code process exited with code ${code}`));\n        } else {\n          resolve();\n        }\n      });\n    });\n    const rl = (0,readline__WEBPACK_IMPORTED_MODULE_3__.createInterface)({ input: child.stdout });\n    try {\n      for await (const line of rl) {\n        if (processError) {\n          throw processError;\n        }\n        if (line.trim()) {\n          yield JSON.parse(line);\n        }\n      }\n    } finally {\n      rl.close();\n    }\n    await processExitPromise;\n  } finally {\n    cleanup();\n    abortController.signal.removeEventListener(\"abort\", cleanup);\n    if (process.env.CLAUDE_SDK_MCP_SERVERS) {\n      delete process.env.CLAUDE_SDK_MCP_SERVERS;\n    }\n  }\n}\nasync function streamToStdin(stream, stdin, abortController) {\n  for await (const message of stream) {\n    if (abortController.signal.aborted)\n      break;\n    stdin.write(JSON.stringify(message) + `\n`);\n  }\n  stdin.end();\n}\nfunction logDebug(message) {\n  if (process.env.DEBUG) {\n    console.debug(message);\n  }\n}\nfunction isRunningWithBun() {\n  return process.versions.bun !== undefined || process.env.BUN_INSTALL !== undefined;\n}\n\nclass AbortError extends Error {\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@anthropic-ai/claude-code/sdk.mjs\n");

/***/ })

};
;